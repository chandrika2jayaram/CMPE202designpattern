package admin.model;

	import Member.model.LibMember;
	import Member.observer.MObserver;
	import Member.observer.MSubject;
	import Member.mstate.MemberState;

	import java.io.Serializable;
	import java.util.ArrayList;
	import java.util.List;

	public class Admin implements MSubject, Serializable {
		static final long serialVersionUID = 1L;
	    private transient ArrayList<MObserver> observers;
	    private String memberId;
	    private String firstName;
	    private String lastName;
	    private String address;
	    private String phone;
	    private String email;
	    private MemberState mstate;
	    private List<LibMember> members;
	   

	    public String getmemberId() {
	        return memberId;
	    }
	     public void setMemberId(String memberId)
	     {
	    	 this.memberId = memberId;
	     }

	    public String getFirstName() {
	        return firstName;
	    }

	    public void setFirstName(String firstName)
	    {
	    	this.firstName = firstName;
	    }
	    
	    public String getLastName() {
	        return lastName;
	    }

	    public void setLastName(String lastName)
	    {
	    	this.lastName = lastName;
	    }
	    
	    	    
	    public String getAddress() {
	        return address;
	    }

	    public void setAddress(String address)
	    {
	    	this.address = address;
	    }
	    
	  	    
	    public String getPhone() {
	        return phone;
	    }

	    public void setPhone(String phone)
	    {
	    	this.phone = phone;
	    }
	    
	    public String getEmail() {
	        return phone;
	    }

	    public void setEmail(String email)
	    {
	    	this.email = email;
	    }
	    
	    public MemberState getState() {
	        return mstate;
	    }

	    public void setState(MemberState mstate) {
	        this.mstate = mstate;
	    }

	    public List<LibMember> getLibMembers() {
	        return members;
	    }

	    public void setItems(List<LibMember> members) {
	        this.members = members;
	    }

	   

	    public boolean active() {
	        return this.mstate.active(20.00);
	    }

	    public boolean delinquate() {
	        return this.mstate.delinquate(20.00);
	    }
	    public boolean frozen(){
	    	return this.mstate.frozen();
	    }
	    
	    public boolean closed(){
	    	return this.mstate.closed();
	    }

	    public String getUniqueIdentifier() {
	        return null;
	    }

	    @Override
	    public String toString() {
	        final StringBuilder sb = new StringBuilder("Admin{");
	    //    sb.append("adminId=").append(adminId);
	        sb.append(", members=").append(members);
	        sb.append(", mstate=").append(mstate.getClass().getName());
	        sb.append('}');
	        return sb.toString();
	    }

		
	    @Override
	    public void registerObserver(MObserver o) {
	        observers.add(o);
	    }

	    @Override
	    public void removeObserver(MObserver o) {
	        int i = observers.indexOf(o);
	        if (i >= 0) {
	            observers.remove(i);
	        }
	    }

	    @Override
	    public void notifyObservers() {
	        for(int i=0;i<observers.size();i++){
	           MObserver observer = (MObserver)observers.get(i);
	            observer.update(this);
	        }
	    }
	}
	    
		
